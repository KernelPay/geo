package geo

import (
	"bytes"
	"encoding/hex"
	"testing"
)

var marshalTestCases = []struct {
	geo       geom
	marshaled string
}{
	{&Point{1, 2}, "0101000000000000000000F03F0000000000000040"},
	{&PointS{Point{1, 2}, 1234}, "0101000020D2040000000000000000F03F0000000000000040"},
	{&PointZ{1, 2, 3}, "0101000080000000000000F03F00000000000000400000000000000840"},
	{&PointM{1, 2, 3}, "0101000040000000000000F03F00000000000000400000000000000840"},
	{&PointZM{1, 2, 3, 4}, "01010000C0000000000000F03F000000000000004000000000000008400000000000001040"},
	{&PointZMS{PointZM{1, 2, 3, 4}, 1234}, "01010000E0D2040000000000000000F03F000000000000004000000000000008400000000000001040"},

	{&LineString{Point{1, 2}, Point{3, 4}}, "010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"},
	{&LineStringZ{PointZ{1, 2, 3}, PointZ{4, 5, 6}}, "010200008002000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840"},
	{&LineStringM{PointM{1, 2, 3}, PointM{4, 5, 6}}, "010200004002000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840"},
	{&LineStringZM{PointZM{1, 2, 3, 4}, PointZM{5, 6, 7, 8}}, "01020000C002000000000000000000F03F000000000000004000000000000008400000000000001040000000000000144000000000000018400000000000001C400000000000002040"},
	{&LineStringZMS{LineStringZM{PointZM{1, 2, 3, 4}, PointZM{5, 6, 7, 8}}, 1234}, "01020000E0D204000002000000000000000000F03F000000000000004000000000000008400000000000001040000000000000144000000000000018400000000000001C400000000000002040"},

	{&Polygon{Coordinates: LineString{Point{1, 2}, Point{3, 4}, Point{5, 6}, Point{1, 2}}},
		"01030000000100000004000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840000000000000F03F0000000000000040",
	},

	{&Polygon{
		Coordinates: LineString{Point{1, 2}, Point{3, 4}, Point{5, 6}, Point{1, 2}},
		Holes: []LineString{
			LineString{Point{9, 8}, Point{7, 6}, Point{5, 4}, Point{9, 8}},
			LineString{Point{6, 5}, Point{4, 3}, Point{2, 1}, Point{6, 5}},
		},
	},
		"01030000000300000004000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840000000000000F03F000000000000004004000000000000000000224000000000000020400000000000001C40000000000000184000000000000014400000000000001040000000000000224000000000000020400400000000000000000018400000000000001440000000000000104000000000000008400000000000000040000000000000F03F00000000000018400000000000001440",
	},

	{&PolygonS{Polygon{
		Coordinates: LineString{Point{1, 2}, Point{3, 4}, Point{5, 6}, Point{1, 2}},
		Holes: []LineString{
			LineString{Point{9, 8}, Point{7, 6}, Point{5, 4}, Point{9, 8}},
			LineString{Point{6, 5}, Point{4, 3}, Point{2, 1}, Point{6, 5}},
		},
	}, 1234},
		"0103000020D20400000300000004000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840000000000000F03F000000000000004004000000000000000000224000000000000020400000000000001C40000000000000184000000000000014400000000000001040000000000000224000000000000020400400000000000000000018400000000000001440000000000000104000000000000008400000000000000040000000000000F03F00000000000018400000000000001440",
	},

	{&MultiPoint{Point{1, 2}, Point{3, 4}}, "0104000000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"},
	{&MultiPointS{MultiPoint{Point{1, 2}, Point{3, 4}}, 1234}, "0104000020D2040000020000000101000000000000000000F03F0000000000000040010100000000000000000008400000000000001040"},

	{&MultiPointZ{PointZ{1, 2, 3}, PointZ{4, 5, 6}}, "0104000080020000000101000080000000000000F03F000000000000004000000000000008400101000080000000000000104000000000000014400000000000001840"},
	{&MultiPointM{PointM{1, 2, 3}, PointM{4, 5, 6}}, "0104000040020000000101000040000000000000F03F000000000000004000000000000008400101000040000000000000104000000000000014400000000000001840"},
	{&MultiPointZM{PointZM{1, 2, 3, 4}, PointZM{5, 6, 7, 8}}, "01040000C00200000001010000C0000000000000F03F00000000000000400000000000000840000000000000104001010000C0000000000000144000000000000018400000000000001C400000000000002040"},

	{&MultiLineString{LineString{Point{1, 2}, Point{3, 4}}, LineString{Point{5, 6}, Point{7, 8}}}, "010500000002000000010200000002000000000000000000F03F000000000000004000000000000008400000000000001040010200000002000000000000000000144000000000000018400000000000001C400000000000002040"},

	{&MultiPolygon{
		Polygon{
			Coordinates: LineString{Point{1, 2}, Point{3, 4}, Point{5, 6}, Point{1, 2}},
			Holes:       []LineString{},
		},
		Polygon{
			Coordinates: LineString{Point{9, 8}, Point{7, 6}, Point{5, 4}, Point{9, 8}},
			Holes:       []LineString{},
		},
	},
		"01060000000200000001030000000100000004000000000000000000F03F00000000000000400000000000000840000000000000104000000000000014400000000000001840000000000000F03F000000000000004001030000000100000004000000000000000000224000000000000020400000000000001C4000000000000018400000000000001440000000000000104000000000000022400000000000002040",
	},
}

func TestMarshal(t *testing.T) {
	for i, c := range marshalTestCases {
		actual := Marshal(c.geo)
		expected, err := hex.DecodeString(c.marshaled)
		if err != nil {
			t.Fatalf("Error decoding hex in case #%d: %v", i, err)
		}
		if !bytes.Equal(actual, expected) {
			t.Errorf("case #%d mismatch: Actual %s, expected %s", i, hex.EncodeToString(actual), hex.EncodeToString(expected))
		}
	}
}
