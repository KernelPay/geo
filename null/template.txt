package null

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"

	"github.com/kernelpayments/geo"
)

// $$$ is a nullable geo.$$$.
type $$$ struct {
	$$$ geo.$$$
	Valid bool
}

// New$$$ creates a new $$$
func New$$$(f geo.$$$, valid bool) $$$ {
	return $$${
		$$$: f,
		Valid: valid,
	}
}

// $$$From creates a new $$$ that will always be valid.
func $$$From(f geo.$$$) $$$ {
	return New$$$(f, true)
}

// $$$FromPtr creates a new $$$ that be null if f is nil.
func $$$FromPtr(f *geo.$$$) $$$ {
	if f == nil {
		return New$$$(geo.$$${}, false)
	}
	return New$$$(*f, true)
}

// UnmarshalJSON implements json.Unmarshaler.
func (f *$$$) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, NullBytes) {
		f.$$$ = geo.$$${}
		f.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &f.$$$); err != nil {
		return err
	}

	f.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (f $$$) MarshalJSON() ([]byte, error) {
	if !f.Valid {
		return NullBytes, nil
	}
	return json.Marshal(f.$$$)
}

// SetValid changes this $$$'s value and also sets it to be non-null.
func (f *$$$) SetValid(n geo.$$$) {
	f.$$$ = n
	f.Valid = true
}

// Ptr returns a pointer to this $$$'s value, or a nil pointer if this $$$ is null.
func (f $$$) Ptr() *geo.$$$ {
	if !f.Valid {
		return nil
	}
	return &f.$$$
}

// IsZero returns true for invalid $$$s, for future omitempty support (Go 1.4?)
func (f $$$) IsZero() bool {
	return !f.Valid
}

// Scan implements the Scanner interface.
func (f *$$$) Scan(value interface{}) error {
	if value == nil {
		f.$$$, f.Valid = geo.$$${}, false
		return nil
	}
	f.Valid = true
	return f.$$$.Scan(value)
}

// Value implements the driver Valuer interface.
func (f $$$) Value() (driver.Value, error) {
	if !f.Valid {
		return nil, nil
	}
	return f.$$$.Value()
}
